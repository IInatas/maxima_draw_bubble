/*               COPYRIGHT NOTICE

Copyright (C) 2020 Marcus Menzel

This program is free software; you can redistribute
it and/or modify it under the terms of the
GNU General Public License as published by
the Free Software Foundation; either version 2 
of the License, or (at your option) any later version. 

This program is distributed in the hope that it
will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE. See the 
GNU General Public License for more details at
http://www.gnu.org/copyleft/gpl.html */

/* histogram_ext */

/* ================== small change list for _V10 --> _ext =====================
added bubble_label's (top/bottom) as well as changed interface compared to	;    15.06.2020 M^2
	former versions for cleaner option processing							
changed the behavior of function histogram_ext() to accept                  ;    20.04.2020 M^2
	1 row /col matrices
added a new histogram based draw type to make it easier                     ;    30.03.2020 M^2
	to draw histogram results as bubble plots using histogram_ext
added a new draw type named bubble to make bubble plots of various formes   ;    28.03.2020 M^2
changed struct according to Robert's comments                               ;    25.06.2016 M^2
Update function according to descriptive.mac from Mario Rodriguez Riotorto  ;    06.07.2016 M^2
--> implement wx(draw2d) function, improved loading of packages,
    improved code with parameter handling */

    
/* loading additional libaries */    
put('histogram_ext, 1, 'version) $

if not get('draw,       'version)  then load("draw")            $
if not get('descriptive,'version)  then load("descriptive")     $

/* check for definition of structure in global structures list, otherwise define it */
if not member (histogram_structure, map (op, structures)) then 
	defstruct	(  histogram_structure(
				            bounds, distance, count, mass_fraction, area_fraction, service
              			)
)$

/*===========================================================================================*
||   Definition of helper functions 
\*===========================================================================================*/
make_matrix_to_list( MATRIX )   :=  block(
    [
        MATRIX_intern
    ],
    if rank( MATRIX ) > 1   then    
        MATRIX_intern: transpose(MATRIX)
    else
        MATRIX_intern: MATRIX          ,
        
    if rank(MATRIX_intern) # 1 then 
        error("make_matrix_to_list: expecting a one row one col matrix", MATRIX)
    else
        return( 
            flatten(args(MATRIX_intern))
    )
)$

/* improved working with vectors having NIL inside */
NIL_o_numberp( ZAHL ) := block(
    [ ],
    if numberp(ZAHL) = true 	 then return(true)
    elseif ZAHL=nil or ZAHL=NIL  then return(true)
    else return(false)
)$

/* from package description  */
extract_options (s,[mo]):=
  block([ss:[],mmo:[]],
    for k in s do
      if member(lhs(k), mo)
        then mmo: endcons(k,mmo)
        else ss : endcons(k,ss),
    [ss,mmo] )$

/* improved rounding function with adjustable number of digits */
round_to( zahl, [digits] )  :=  block(
    [   temp    :   0   ,
        up      :   0   
    ]                                                   ,
    if length( digits ) > 0 then up : first( digits )   ,
    if not numberp( up )    then up : 0                 ,
    if not integerp( up )   then up : round( up )       ,
    temp    :   round( zahl * 10^up )                   ,
    return( temp / 10^up )
)$

/*===========================================================================================*
||   Definition of the functions 
\*===========================================================================================*/

/*===========================================================================================*
||   FUNCTION: histogram_ext(LIST, [nclasses])
||   * histogram_ext ( LIST)	
||   * histogram_ext ( LIST , integer )
||   * histogram_ext ( LIST, bin-list )
||   
||   Returns the histogram of LIST. LIST can be a flat list of integers, floats, rationals or a one row/column matrix are accepted. 
||   The length of LIST must be >2 otherwise an error is trigged. 
||   
||   Providing a LIST only sets the number of symmetric bin according to an algorithm described by  Freedman and Diaconis  
||   "n the histogram as a density estimator: L_2 theory. " in Zeitschrift f"ur Wahrscheinlichkeitstheorie und verwandte Gebiete.  
||   Band 57, Nr. 4, 1981, S. 453.   
||   Providing a LIST and an integer sets this number as symmetric bins in between the lowest and highest values from LIST.
||   
||   In case the parameter is a nested list given all numbers in the form [ [low_1, high_1],[low_2,high_2],... ] it will count 
||   the bins accordingly. A zero distance is fine, but the list needs to be sorted in ascending order to make sure no unwanted 
||   counting happens. If the classes don't match all list members, the total value in the resulting structure will differ from LIST.
||   
||   The output is a structure of type “*histogram_structure*” with the internal lists (bounds, distance, count, mass_fraction,
||   area_fraction, service), the last gives the minimal, maximal and total sum of values from the LIST and 
||   further information about LIST.   
||   
||   
\*===========================================================================================*/
histogram_ext(LIST, [Options]):=
block(  
    [ 
        area_all        : 0                         ,    
        h_struct                                    ,
        LISTE           : []                        ,
        nclasses		: []						,
        list_intern		: []						,
        bag    			: []
	]                                                                                           ,

/* # check if LIST is processable, here difference to descriptive.mac --> listify LIST # */   

if 		listp ( LIST ) = true   then         LISTE : LIST
elseif matrixp( LIST ) = true   then         LISTE : make_matrix_to_list( LIST )                ,

if every( identity, map( NIL_o_numberp, LISTE ) ) = false   then
    error("histogram_ext: expecting pure numbers in LIST as list of one row/col matrix",LISTE)  ,
if length( LISTE ) < 3     then
    error("histogram_ext: LIST is too short", LISTE)                                            ,

/*  ------------------------------------------------------------------ ** ach ja, Diagramm braucht auch die Bubbles mechanik ** */
[ Options, list_intern ]	:   extract_options(
									Options, 'nclasses  )										,

if 		length(     list_intern ) > 0 				then			bag : rhs(list_intern[1])		,

if 		length(     list_intern ) < 1				then			nclasses : []	
elseif	numberp( bag ) = true and bag > 0			then			nclasses : bag 
elseif	listp( bag )   = true and length(bag) = 3	then
			nclasses : makelist( [i, i+(bag[2]-bag[1])/bag[3]], i, 
					bag[1], bag[2]-(bag[2]-bag[1])/bag[3], (bag[2]-bag[1])/bag[3] )
elseif	listp( bag )   = true and length(bag) = 2	then ( block (
			[
				distance    :   0                       ,
                quantil_1   :   quantile(LISTE, 1/4)    ,
                quantil_3   :   quantile(LISTE, 3/4)
			]	,
			distance :   2* ( quantil_3 - quantil_1 ) / length(LISTE)^(1/3)  			,
			nclasses : 	makelist( [i,i+distance], i, bag[1], bag[2]-distance, distance )
		) )
elseif	listp( bag )   = true and length(bag) > 3   then 			nclasses : bag
elseif	setp( bag )	   = true and length(bag) > 1	then ( block(
			[
				my_list 	:  	[]	,
				my_min		:	0	,
				my_max		:	1	,
				distance	:	2	
			]	,
			my_list 	:  	sort(listify( bag)) ,
			my_min		:	first( my_list )	,
			my_max		:	last ( my_list )	,
			if my_min = my_max	then error("histogram_ext: >= 2 bin numbers are needed."),
			distance	:	length( my_list )-1 ,
			nclasses : 	makelist( [ my_list[i], my_list[i+1] ], i, 1, distance )
		) )	
elseif	member( bag, ['fd, 'scott, 'sturges] )		then (
		if bag = 'fd			then	( /* Robust Freedman - Diaconis method */
			h: qrange(LISTE),
            if h = 0	then h: 2 * median(abs(LISTE-median(LISTE))), /* twice median absolute deviation */
			if h > 0	then nclasses : ceiling(range(LISTE) / (2 * h * length(LISTE)^(-1/3)))
			else nclasses : 1 
		)
		elseif bag = 'scott		then	( /* Scott's method to be applied under Gaussian assumptions */
			h: 3.5 * std1(LISTE) * length(LISTE)^(-1/3),
			if h > 0	then nclasses : ceiling(range(LISTE) / h)
			else nclasses : 1 )
		elseif bag = 'sturges	then	( /* Sturges' method to be applied under Gaussian assumptions and n < 200 */
			nclasses :	ceiling(1 + log(length(LISTE)) / 0.6931471805599453) /* <-- log(2) */
		)
),


/* # case with simple splitting of the list in approximated nclasses bins # */
        if nclasses = [] then (
            block([
                distance    :   0                       ,
                quantil_1   :   quantile(LISTE, 1/4)    ,
                quantil_3   :   quantile(LISTE, 3/4)    ],
            /* 
                Estimation of number of classes after Freedman und Diaconis  
                "n the histogram as a density estimator: L_2 theory. "
                In: Zeitschrift f?r Wahrscheinlichkeitstheorie und verwandte Gebiete. 
                Band 57, Nr. 4, 1981, S. 453, doi:10.1007/BF01025868
            */
            distance    	:   2* ( quantil_3 - quantil_1 ) / length(LISTE)^(1/3)  		,
            nclasses    	:   floor( ( lmax(LISTE) - lmin(LISTE) ) / distance )   		
            /* print("approximated number of bins: ", nclasses) */
            )
        ),

/* # symmetric case with simple splitting of the list in nclasses bins # */
        if atom(nclasses)=true then ( 
            block(  [
                li_min, li_max, li_lgth, a, b, distance, class, h_struct			        ],
            li_min  :   lmin(LISTE)                 										,
            li_max  :   lmax(LISTE)                 										,
            li_lgth :   length(LISTE)               										,
            a       :   []                          										,
            b       :   []                          										,
            distance:   (li_max - li_min)/(nclasses)										,
            class   :   makelist(0,a,1,(nclasses+1))										,
            for a:1 thru li_lgth step 1 do (
                 block( []  ,
                    b       : floor(  ((LISTE[a] - li_min) / distance)+1 )					,
					class[b]:  class[b] + 1   
                 )  
            ),
            class[nclasses] :  class[nclasses+1]+ class[nclasses]                           ,
            h_struct        : new(  histogram_structure (   
                                                            makelist([0,0],a,1,nclasses)    ,
                                                            makelist(distance,a,1,nclasses) ,
                                                            makelist(0,a,1,nclasses)        ,
                                                            makelist(0,a,1,nclasses)        ,
                                                            makelist(0,a,1,nclasses)        ,
                                                            ['LIST_MIN  = li_min        ,
                                                             'LIST_MAX  = li_max        , 
                                                             'CLASS_CNT = li_lgth       , 
                                                             'CLASS_MIN = 0             , 
                                                             'CLASS_MAX = 0             , 
                                                             'CLASS_NO  = nclasses      ]
                                                        )   
                                 )																	,
          for a:1 thru nclasses do(
                h_struct@bounds[a]   		  :   [ li_min+(a-1)*distance, li_min+(a)*distance ]	,
                h_struct@distance[a]    	  :   distance                                          ,
                h_struct@count[a]   	      :   class[a]                			                ,
                h_struct@mass_fraction[a]	  :   class[a] / li_lgth                                ,
                h_struct@area_fraction[a]	  :   h_struct@mass_fraction[a] / h_struct@distance[a] 
            ),
            h_struct@service[4]     :   'CLASS_MIN = lmin(flatten(args(h_struct@bounds)))       	,
            h_struct@service[5]     :   'CLASS_MAX = lmax(flatten(args(h_struct@bounds)))       	,

          /* Integral of area_fraction should equal to 1 */
            area_all                :   lsum(a,a,h_struct@area_fraction)                        	,
            h_struct@area_fraction  :   map(lambda([a], a / area_all ), h_struct@area_fraction) 	,

            return(h_struct)           
            )
        )

/*  # asymmetric case with list containing [lower,upper] border values to describe the bins # */
        elseif (listp(nclasses)=true  and length(nclasses)>0) then (
            block(  [
                        a       :   []                                  ,
                        b       :   1                                   ,
                        flag    :   false                               ,
                        class   :   makelist(0,a,1,length(nclasses))    ,
                        nc_lgth :   length(nclasses)                    ,
                        li_lgth :   length(LISTE)                       ,
                        li_min  :   lmin(LISTE)                         ,
                        li_max  :   lmax(LISTE)                         ,
                        h_struct                                       
                    ],

		    /* go thru LISTE and check every entry; counter is b  */
                for content in LISTE do (
                    flag    : false         ,
                    a       : 0             ,
                    /* inner cycle thru nclasses-list to check if and where to count; counter is a */
                    unless ( flag or a >= nc_lgth ) do (
                        a : a + 1,
                        if ( content >= first(nclasses[a]) and content <= last(nclasses[a])  ) 
                            then flag : true
                    ),

                    /* only if LISTE[b]=content entry falls into a bin count it */ 
                    if flag 
                        then class[a] : class[a] + 1  
                ),

			/* now count the matches inside the classes --> redefine li_lgth */
                li_lgth : sum(class[a],a,1,nc_lgth),
                if is(equal(li_lgth, 0))    then (
                    error("histogram_ext: Nothing counted - giveing up")
                )                                                                       ,
                h_struct: new(  histogram_structure (   
                                                        makelist([0,0],a,1,nc_lgth)     ,
                                                        makelist(0,a,1,nc_lgth)         ,
                                                        makelist(0,a,1,nc_lgth)         ,
                                                        makelist(0,a,1,nc_lgth)         ,
                                                        makelist(0,a,1,nc_lgth)         ,
                                                        ['LIST_MIN  = li_min        ,
                                                         'LIST_MAX  = li_max        , 
                                                         'CLASS_CNT = li_lgth       , 
                                                         'CLASS_MIN = 0             , 
                                                         'CLASS_MAX = 0             , 
                                                         'CLASS_NO  = nc_lgth       ]
                                                    )   
                ),
                for a:1 thru nc_lgth do(
                    h_struct@bounds[a]   	    :   [first(nclasses[a]), last(nclasses[a])] 		,
                    h_struct@distance[a]    	:   (last(nclasses[a]) - first(nclasses[a]))		,
                    h_struct@count[a]   	    :   class[a]                                		,
                    h_struct@mass_fraction[a]	:   class[a]/li_lgth                        
                ),

                for a:1 thru nc_lgth do(
                    if  h_struct@distance[a] > 0 then ( 
                       h_struct@area_fraction[a] :   h_struct@mass_fraction[a] / h_struct@distance[a]
                    )
                    else (  
                        h_struct@area_fraction[a]  : 0 
                    )
                ),
                h_struct@service[4]     :   'CLASS_MIN = lmin(flatten(args(h_struct@bounds)))       ,
                h_struct@service[5]     :   'CLASS_MAX = lmax(flatten(args(h_struct@bounds)))       ,

			/* Integral of area_fraction should equal to 1 */
                area_all                :   lsum(a,a,h_struct@area_fraction)                        ,
                h_struct@area_fraction  :   map(lambda([a], a / area_all ), h_struct@area_fraction) ,

                return(h_struct)      
            )
        ) 
    else (
        return(false)
    )
)$

histogram_draw_processing([description])	:=(
    block(
        [
            STRUCT      : first(description)    ,
            li_lgth     : 0                     ,
            i           : 0                     ,
            height      : []                    ,
            name_yaxis  : "mass fraction"       ,
            name_xaxis  : "value range"         ,
            content     : []                    ,
            lowest      : 0                     ,
            highest     : 0                     ,
            drawopts    : []                    , 
            localopts   : []                    
        ],

        lowest          : rhs(STRUCT@service[4])                ,
        highest         : rhs(STRUCT@service[5])                ,
        li_lgth         : rhs(STRUCT@service[6])                ,

        [drawopts, localopts]   :   extract_options(description, 'area, 'mass, 'count),

        if length(localopts) > 1   
            then  localopts : last(localopts)                   ,

        if localopts = [] or localopts = ['count] 
        then    (
                height      : STRUCT@count                      ,
                name_yaxis  : "absolute counts"
                ) 
        elseif args(localopts) = ['mass]
        then (
                height      : STRUCT@mass_fraction              ,
                name_yaxis  : "mass fraction"
        ) 
        elseif args(localopts) = ['area]
        then (
                height      : copylist(STRUCT@area_fraction)    ,
                name_yaxis  : "area normalized fraction"
             )
        else (
                height      : STRUCT@count                      ,
                name_yaxis  : "absolute counts",
                error("histogram_draw_processing: no graph option found: ", localopts)
             ),
        name_xaxis          : "value range"                     ,

        if localopts = ['area] then (
            for i:1 thru li_lgth do (
                if equal(height[i], 0) and STRUCT@mass_fraction[i] > 0 then (
                    height[i]   :   STRUCT@mass_fraction[i]
                )
            ),
            content:  makelist(
                [   (STRUCT@bounds[i][1] + STRUCT@bounds[i][2]) / 2 ,
                    height[i]                                       ,
                    STRUCT@distance[i]                              ],
                i,1, li_lgth
            )
        ) 
        else (
        content:  makelist(
                [   (STRUCT@bounds[i][1] + STRUCT@bounds[i][2]) / 2 ,
                    height[i]                                       ,
                    STRUCT@distance[i]                              ],
            i,1, li_lgth
            )
        ),
        if length(drawopts) >1 then 
            drawopts    :   delete(first(drawopts),drawopts)
        else
            drawopts    : []                                        ,

        scen:   [
xaxis       = true                                                                      ,
xrange      = float([lowest - abs(lowest * 5/100), highest + abs( highest * 5/100 )])   ,
yrange      = float([0,lmax(height)*120/100])                                           ,
'key        = concat("total counts:",string( rhs(STRUCT@service[3]) ))                  ,
[xlabel     = name_xaxis ]                                                              ,
[ylabel     = name_yaxis ]                                                              ,
line_type   = solid                                                                     ,
fill_color  = blue                                                                      ,
fill_density= 0.6                                                                       ,
line_width  = 2                                                                         ,
drawopts                                                                                ,
apply('bars,content)                     
               ]
    )   
)$

/* ---------------------------------------------------------------------*\
|   usage of bubbles function for plot with package draw
|
|   __data_list : a nested list [ [], [], ... ] or matrix 
|       with following row order:
|       [ x_n, y_n, radius_n , fill-color_n, border-color_n ] 
|   fill-color_n, border-color_n take only HTML color code
|
|   Options: adding things to description like border = false is 
|            called before the graphic objects
|            bubble_line = blue is overriding presets and 
|                         removes the last colum in __data_list
\*--------------------------------------------------------------------- */

bubbles ( [description] )  :=  
block(
    [
        M__data , __data_list               ,
		x__data , y__data					,
		r__data , color_fill				,
		_tilt       : 1						,
		_scale_x    : 1               		,
        color_line        : gray60			,
        draw_code   :   [
                        border = true   ,
                        nticks = 100
                        ]                   ,
		content		:	[]					,
        __in, __out :   []
    ]                                                                   ,
  
    __data_list :   pop(description)                                    ,
    if matrixp( __data_list ) = true    then 
        M__data :   copymatrix(__data_list)
    else    
        M__data :   transpose(apply( matrix, __data_list))              ,

    if length( description ) > 0 then (
        [__out,__in]:   extract_options(description, 'bubble_line, 'bubble_tilt, 'bubble_scale_x),
        if length(__in) >   0  then 
		while __in # [] do (
            content : pop( __in )                                   	,
            if lhs(content) = 'bubble_line   then  (
				color_line  :   rhs(content)               					,
				if length(M__data[1])= 5 then M__data: submatrix (M__data, 5)
			)																,
			if lhs(content) = 'bubble_tilt    then _tilt    : rhs(content) ,
			if lhs(content) = 'bubble_scale_x then _scale_x : rhs(content)
        )                                                               
	)																	,
    draw_code   :   append( draw_code, __out )                          ,
    
    x__data     :   flatten( args( col( M__data, 1 ) ) )                ,
    y__data     :   flatten( args( col( M__data, 2 ) ) )                ,
    r__data     :   flatten( args( col( M__data, 3 ) ) )                ,
    color_fill  :   flatten( args( col( M__data, 4 ) ) )                ,
    
    if length(M__data[1]) >= 5 then
        color_line  :   flatten( args( col( M__data, 5 ) ) )                
    else (
            color_line  :   makelist(color_line, i , x__data)   
	)       															,

    for data_nr:1 thru length(x__data)   do
        if r__data[data_nr] >0 then
            draw_code   :   append( draw_code, 
                        [
                            fill_color  = color_fill[data_nr]                   ,
                            color       = color_line[data_nr]                   ,
                            ellipse ( 
                                x__data[data_nr], y__data[data_nr]  ,
                                r__data[data_nr]*_scale_x     , 
                                r__data[data_nr]*_tilt        , 0, 360
                            )
                        ] )                                             ,
    return( draw_code )
)$

/* ---------------------------------------------------------------------*\
|   Usage of histogram_bubbles function with package draw
|
|   STRUCT : a histogram struct containing the data to be visualized
|   Options:
|   fill-color and border-color_n only take HTML color code
|   (expl: makelist( printf(false,"#~2,'0x~2,'0x~2,'0x",0,0,random(205)+51), i, 10 ))
|   bubble_x = 2 is a real number giving the x position on the graph (=1 if not changed)
|   bubble_x_label = "text" text printed at location of bubble_x    \!/not yet done\!/
|   bubble_fill = [list with HTML color code] ... length = to STRUCT@service[6]
|   bubble_line = [list with HTML color code] ... length = to STRUCT@service[6]
|
|	example:
|   STRCUT: histogram_ext( 
|    	makelist( random(30), 200), 
|    	makelist( [i, i+DELTA], i, 0, 30, DELTA )
|    )   ,   DELTA=2 $
|
|   draw2d(
|		histogram_bubbles( STRUCT, 'mass, bubble_tilt=17 , bubble_fill=green),
|		xrange=[0.5,1.5],
|		grid=true
|	);  
|
\*--------------------------------------------------------------------- */

histogram_bubbles  ([description])   :=  
block(
    [
        STRUCT      : pop(description)      ,
        li_lgth     : 0                     ,
        bubble_x    : 1                     ,
        bubble_fill : [blue]                ,
        bubble_line : [grey40]              ,
        bubble_show	: ['mass]               ,
        bubble_label: []                    ,
        bubble_digit: [1]                   ,
        pos_opts    : []                    ,
        height      : []                    ,
        
        name_yaxis  : ""                    ,
        name_xaxis  : ""                    ,
        content     : []                    ,
        lowest      : 0                     ,
        highest     : 0                     ,
        drawopts    : []                    , 
        localopts   : []                    
    ],
    
        lowest      : rhs(STRUCT@service[4])                                            ,
        highest     : rhs(STRUCT@service[5])                                            ,
        li_lgth     : rhs(STRUCT@service[6])                                            ,
    
    if length( description ) > 0   then (
        [drawopts, pos_opts]:   extract_options(
            description, 'bubble_x, 'bubble_x_label, 'bubble_fill, 'bubble_line, 'bubble_label, 'bubble_show ),
        while pos_opts # []     do (
            content : pop( pos_opts )                                                  ,
            if lhs(content) = 'bubble_x_label   then  bubble_x_label : rhs(content) ,
            if lhs(content) = 'bubble_x         then  bubble_x       : rhs(content) ,
            if lhs(content) = 'bubble_fill      then  bubble_fill    : rhs(content) ,
            if lhs(content) = 'bubble_show      then  bubble_show    : rhs(content) ,
            if lhs(content) = 'bubble_label     then  bubble_label   : rhs(content) ,
            if lhs(content) = 'bubble_line      then  bubble_line    : rhs(content) 
        )
    )                                                                                   ,
    if bubble_show = 'area		     then  ( height 		: STRUCT@area_fraction 	 ,
					                            name_yaxis  : "area normalized fraction of bins"  
											)											,
	if bubble_show = 'mass			then  ( height			: STRUCT@mass_fraction 	 ,
					                            name_yaxis  : "mass fraction of bins"        
											)											,
	if bubble_show = 'count			then  ( height 			: STRUCT@count 	 		,
					                            name_yaxis  : "absolute counts" 
											)											,
	
    if listp(bubble_line) # true                then  bubble_line    : [bubble_line]    ,
	if listp(bubble_fill) # true                then  bubble_fill    : [bubble_fill]    ,
      
    if length( bubble_fill ) # li_lgth          then 
        bubble_fill: makelist( first(bubble_fill), i, STRUCT@distance )                 ,
    if length( bubble_line ) = 1                then    
        drawopts: append( drawopts, ['bubble_line = first(bubble_line)] )
    else if length( bubble_line ) # li_lgth     then 
        bubble_line: makelist( first(bubble_line), i, STRUCT@distance )                 ,
	
	if bubble_label = 'top                      then    (
        localopts:  last( sublist_indices( STRUCT@count, lambda([u], u>0) )  )  ,
        drawopts :  append( drawopts, [ 
                        label([ string( float(STRUCT@bounds[ localopts ][2]) ) , 
                            bubble_x                                        , 
                            last( STRUCT@bounds[ localopts ])*1.07 ]        ) 
                    ])                                                          )       ,
    if bubble_label = 'bottom                   then    (
        localopts:  first( sublist_indices( STRUCT@count, lambda([u], u>0) )  )  ,
        drawopts :  append( drawopts, [ 
                        label([ string( float(  round_to(STRUCT@bounds[ localopts ][1], bubble_digit)  ) ) , 
                            bubble_x                                        , 
                            first( STRUCT@bounds[ localopts ])*0.93 ]        ) 
                    ])                                                          )       ,
    
    content :   [ 
        makelist( bubble_x      , i,    STRUCT@distance )                       ,
        makelist( apply("+",i)/2, i,    STRUCT@bounds   )                       ,
        height                                                                  ,
        bubble_fill                                                             
                ]                                                                       ,
    if length(bubble_line) = li_lgth    then content : append( content, bubble_line)    ,
    
    content :   transpose(  apply( matrix, content ) )                                  ,
    content :   append   ( [content], ['ylabel=name_yaxis] , drawopts )                 ,
	
    apply( 'bubbles , content )
)   $

histogram_draw([desc])      :=  draw2d(apply(histogram_draw_processing,desc))$

wxhistogram_draw([desc])    :=  wxdraw2d(apply(histogram_draw_processing,desc))$


